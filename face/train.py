# -*- coding: utf-8 -*-
"""train.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ySzi271SojnPGQ4zjfLskuQEV8xaXxfv
"""

# Check what's in your dataset_loader.py
import os
print("📁 Current directory files:")
for file in os.listdir('.'):
    if file.endswith('.py'):
        print(f"   - {file}")

# Check the actual class name in dataset_loader.py
print("\n🔍 Checking dataset_loader.py contents...")
with open('dataset_loader.py', 'r') as f:
    content = f.read()
    # Look for class definitions
    import re
    classes = re.findall(r'class\s+(\w+)', content)
    print(f"Classes found in dataset_loader.py: {classes}")

# train.py
import sys
import os

# Add current directory to Python path
sys.path.append('/kaggle/working' if os.path.exists('/kaggle') else '/content')
sys.path.append('.')

# Try different possible class names
try:
    from dataset_loader import KaggleFER2013Loader as DataLoader
    print("✅ Imported KaggleFER2013Loader")
except ImportError:
    try:
        from dataset_loader import FER2013Loader as DataLoader
        print("✅ Imported FER2013Loader")
    except ImportError:
        try:
            from dataset_loader import ImageDatasetLoader as DataLoader
            print("✅ Imported ImageDatasetLoader")
        except ImportError:
            try:
                from dataset_loader import EmotionDatasetLoader as DataLoader
                print("✅ Imported EmotionDatasetLoader")
            except ImportError:
                print("❌ Could not import any loader class")

# Debug: Check what's in your dataset_loader.py
print("🔍 Debugging dataset_loader.py...")

# List all files
print("📁 Files in current directory:")
for file in os.listdir('.'):
    print(f"  - {file}")

# Read and display the content of dataset_loader.py
try:
    with open('dataset_loader.py', 'r') as f:
        content = f.read()
        print(f"\n📄 Content of dataset_loader.py (first 500 chars):")
        print(content[:500])

        # Find all class names
        import re
        classes = re.findall(r'class\s+(\w+)', content)
        print(f"\n🎯 Classes found: {classes}")

        # Find all function names
        functions = re.findall(r'def\s+(\w+)', content)
        print(f"🔧 Functions found: {functions[:10]}...")  # Show first 10

except FileNotFoundError:
    print("❌ dataset_loader.py not found in current directory")
except Exception as e:
    print(f"❌ Error reading file: {e}")

# train.py - UNIVERSAL VERSION
import sys
import os
import importlib.util

# Add current directory to Python path
sys.path.append('/kaggle/working' if os.path.exists('/kaggle') else '/content')
sys.path.append('.')

def import_dataset_loader():
    """Dynamically import the dataset loader class"""
    try:
        # Import the module
        spec = importlib.util.spec_from_file_location("dataset_loader", "dataset_loader.py")
        dataset_module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(dataset_module)

        # Find the first class that looks like a dataset loader
        for attr_name in dir(dataset_module):
            attr = getattr(dataset_module, attr_name)
            if (isinstance(attr, type) and
                attr_name not in ['object', 'Exception', 'BaseException'] and
                attr_name.endswith(('Loader', 'Dataset', 'DataLoader'))):
                print(f"✅ Found dataset loader class: {attr_name}")
                return attr

        # If no class found with common names, try any class
        for attr_name in dir(dataset_module):
            attr = getattr(dataset_module, attr_name)
            if isinstance(attr, type) and attr_name not in ['object', 'Exception', 'BaseException']:
                print(f"✅ Using class: {attr_name}")
                return attr

        raise ImportError("No suitable class found in dataset_loader.py")

    except Exception as e:
        print(f"❌ Error importing dataset_loader: {e}")
        raise

def import_model():
    """Import the model class"""
    try:
        from model import EmotionCNN
        print("✅ Imported EmotionCNN from model.py")
        return EmotionCNN
    except ImportError as e:
        print(f"❌ Error importing model: {e}")
        raise

# Import the classes
try:
    DataLoader = import_dataset_loader()
    EmotionCNN = import_model()
except Exception as e:
    print(f"❌ Failed to import required classes: {e}")
    print("💡 Please check your files exist and have the correct classes")
    exit(1)

import numpy as np
import matplotlib.pyplot as plt

def plot_training_history(history):
    """Plot training history"""
    plt.figure(figsize=(12, 4))

    # Plot accuracy
    plt.subplot(1, 2, 1)
    plt.plot(history.history['accuracy'], label='Training Accuracy')
    plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
    plt.title('Model Accuracy')
    plt.xlabel('Epoch')
    plt.ylabel('Accuracy')
    plt.legend()

    # Plot loss
    plt.subplot(1, 2, 2)
    plt.plot(history.history['loss'], label='Training Loss')
    plt.plot(history.history['val_loss'], label='Validation Loss')
    plt.title('Model Loss')
    plt.xlabel('Epoch')
    plt.ylabel('Loss')
    plt.legend()

    plt.tight_layout()
    plt.savefig('training_history.png')
    plt.show()

def train_emotion_model():
    """Train the emotion recognition model"""
    print("🚀 Starting Emotion Recognition Model Training")
    print("=" * 60)

    # Load dataset
    loader = DataLoader()
    # Changed load_dataset to load_kaggle_dataset based on debugging output
    X_train, X_test, y_train, y_test = loader.load_kaggle_dataset()

    if X_train is None:
        print("❌ Failed to load dataset. Cannot train model.")
        return None

    print(f"\n📊 Training set: {X_train.shape[0]} samples")
    print(f"📊 Test set: {X_test.shape[0]} samples")
    print(f"📐 Input shape: {X_train.shape[1:]}")

    # Build and train model
    print("\n🧠 Building CNN Model...")
    model = EmotionCNN()
    model.compile_model(learning_rate=0.001)

    # Display model summary
    print("\n📋 Model Architecture:")
    model.model.summary()

    print("\n🎯 Starting Training...")
    print("This will take a while. Please wait...")

    # Train with fewer epochs for faster results
    history = model.train(X_train, y_train, X_test, y_test, epochs=30, batch_size=32)

    # Evaluate the model
    print("\n📈 Evaluating model...")
    train_loss, train_accuracy = model.model.evaluate(X_train, y_train, verbose=0)
    test_loss, test_accuracy = model.model.evaluate(X_test, y_test, verbose=0)

    print(f"✅ Final Training Accuracy: {train_accuracy:.4f}")
    print(f"✅ Final Test Accuracy: {test_accuracy:.4f}")

    # Save the model
    model_path = 'emotion_model.h5'
    model.save_model(model_path)

    # Plot training history
    plot_training_history(history)

    print(f"\n🎉 Training Completed!")
    print(f"💾 Model saved as: {model_path}")

    return model_path

if __name__ == "__main__":
    model_path = train_emotion_model()

    if model_path:
        print("\n" + "=" * 60)
        print("🎊 TRAINING COMPLETE!")
        print("📁 Your model is saved at:", model_path)
        print("=" * 60)

